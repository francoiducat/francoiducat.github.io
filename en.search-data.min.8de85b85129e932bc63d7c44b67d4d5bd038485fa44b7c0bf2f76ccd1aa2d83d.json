[{"id":0,"href":"/docs/java/springboot-graphql-client/","title":"Springboot Graphql Client","section":"Java","content":"Minimal Graphql client request with Springboot #  https://unsplash.com/license Photo from Farzad Nazifi under Unsplash Licence\nIntroduction #  Most APIâ€™s architectural styles are RESTful. For some good reasons, APIs can also be built based on a Graphql architecture style. I recently had the opportunity to call one of them. I discovered and tried several ways to perform this Graphql request, all with pros and cons. In this article, I will describe how to perform a minimal Graphql client request with Spring Boot and WebClient.\nRequirements #  A Spring Boot Project is mandatory. I am using maven here.\nDependencies #  Mandatory #  WebFlux dependency to get WebClient:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-webflux\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Starter Test dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; to make sure Spring Application Context loads:\nOptional #  Lombok because it saves boilerplate code:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; Graphql Server #  I found this public Countries Graphql API from trevorblades. This API uses this Countries List as data sources.\nGraphql Client #  Graphql request body #  1 Basic curl to get familiar with Graphql client request #  A Graphql request requires a body request containing at least a query. Optionally a variable and an operationName. (operationName is only required if multiple operations are present in the query. I donâ€™t use it in this tutorial).\nJust like this curl example:\ncurl \\ --location \\ --request POST 'https://countries.trevorblades.com/' \\ --header 'Content-Type: application/json' \\ --data-raw '{\u0026quot;query\u0026quot;:\u0026quot;query { \\n country(code: \\\u0026quot;BE\\\u0026quot;) { \\n name\\n capital\\n currency\\n }\\n}\u0026quot;,\u0026quot;variables\u0026quot;:{}}' You may copy/paste it into your terminal. The response should look like this\n{ \u0026#34;data\u0026#34;: { \u0026#34;country\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Belgium\u0026#34;, \u0026#34;capital\u0026#34;: \u0026#34;Brussels\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;EUR\u0026#34; } } } So far we have a working Graphql curl request. Letâ€™s now code it in java.\n2. Java Graphql query #  2.1 GraphqlRequestBody #  Letâ€™s create the GraphqlRequestBody object.\n2.2 Graphql Query #  Letâ€™s now create a getCountryDetails.graphql file in the resources folder of the project.\nquery($code: ID!) { country(code: $code) { name capital currency } } 2.3 Graphql Variables #  Letâ€™s create a variables.graphql file in the resources folder.\n{ \u0026#34;code\u0026#34; : \u0026#34;countryCode\u0026#34; } Graphql response #  Now that I have my Graphql request body and based on what Iâ€™m expecting from the API, let\u0026rsquo;s handle the response\nData Transfer Object #  I create my CountryDto Object :\n@Getter public class CountryDto { private CountryData data; @Getter public class CountryData { private Country country; @Getter public class Country { private String name; private String capital; private String currency; } } } Eventually, letâ€™s create the CountryClient class ðŸ˜€.\nI said it was a minimal Graphql client request, didnâ€™t I?\n@Service @Slf4j public class CountryClient { private final String url; public CountryClient(@Value(\u0026#34;https://countries.trevorblades.com/\u0026#34;) String url) { this.url = url; } public CountryDto getCountryDetails(final String countryCode) throws IOException { WebClient webClient = WebClient.builder().build(); GraphqlRequestBody graphQLRequestBody = new GraphqlRequestBody(); final String query = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;getCountryDetails\u0026#34;); final String variables = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;variables\u0026#34;); graphQLRequestBody.setQuery(query); graphQLRequestBody.setVariables(variables.replace(\u0026#34;countryCode\u0026#34;, countryCode)); return webClient.post() .uri(url) .bodyValue(graphQLRequestBody) .retrieve() .bodyToMono(CountryDto.class) .block(); } } GraphqlSchemaReaderUtil class to read Graphql files stored in the resource folder:\n@Slf4j public final class GraphqlSchemaReaderUtil { public static String getSchemaFromFileName(final String filename) throws IOException { return new String( GraphqlSchemaReaderUtil.class.getClassLoader().getResourceAsStream(\u0026#34;graphql/\u0026#34; + filename + \u0026#34;.graphql\u0026#34;).readAllBytes()); } } Letâ€™s just log the Graphql response in the main method of our Spring Boot App:\n@SpringBootApplication @Slf4j public class GraphqlClientApplication { public static void main(String[] args) throws IOException { ConfigurableApplicationContext context = SpringApplication.run(GraphqlClientApplication.class, args); CountryClient client = (CountryClient) context.getBean(\u0026#34;countryClient\u0026#34;); ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter(); CountryDto countryDto = client.getCountryDetails(\u0026#34;BE\u0026#34;); log.info(ow.writeValueAsString(countryDto)); } } Now, your console should log the response like this:\nUnit Test #  Unit test with MockWebServer can be found here.\nTL;DR #  Go to Github Repo.\n"},{"id":1,"href":"/docs/productivity/compress-pdf-offline/","title":"Compress Pdf Offline","section":"Productivity","content":"Compress PDF offline with ghostscript #  I found this great tool to compress pdf (python script) from the command line.\nRequirements #  Make sure you have ghoscript installed. If not just run brew install ghoscript\nHow to #  Copy source files from https://github.com/hkdb/cpdf to your bin directory (thatâ€™s defined in your env) eg. /usr/local/bin if you are on OSX.\nThen from your favorite terminal, just use one of the commands described in the readme of the project.\nBasic command:\ncpdf ebook in.pdf out.pdf Thatâ€™s all.\nThank you hkdb!\n"},{"id":2,"href":"/docs/productivity/every-day-git-commands/","title":"Every Day Git Commands","section":"Productivity","content":"Every day Git commands for developers #  Here are some day to day useful git commands\nShow all remotes #  This show origin and upstream remotes\ngit remote -v git remote show origin #shows branches, tags etc. git remote show upstream #shows branches, tags etc. Add upstream remote #  (vs origin remote)\ngit remote add upstream git@github.com:username/git-repo.git Remove a remote file #  Remove a remote file or directory from a Git repository without deleting it from the local filesystem\nFor single file: #  git rm --cached myremotefiletodelete.log git commit -m \u0026quot;remove file from repo\u0026quot; git push For single directory: #  git rm --cached -r myremotedirectortytodelete git commit -m \u0026quot;remove folder from repo\u0026quot; git push Shortcut add \u0026amp; commit all files #  Without shortcut\ngit add . git commit -m \u0026quot;commit message\u0026quot; With shortcut\ngit commit -am \u0026quot;commit message\u0026quot; Show git history #  using pretty format\ngit log --pretty=format:\u0026quot;%h - %an, %ar : %s\u0026quot; "},{"id":3,"href":"/docs/productivity/google-spreadsheet-tricks/","title":"Google Spreadsheet Tricks","section":"Productivity","content":"Google spreadsheet tricks #  Remove characters from a string in a cell with Google spreadsheet #  Goal #  Remove the first 2 characters from a string in cell D1 :\nÂ =RIGHT(D1,LEN(D1)-2) Explanations #   LEN(D1) returns the length of the string in a cell. RIGHT(D1, X) returns a substring from the end. First argument is the string. Seconde argument is the length of the substring to return.  Alternatively, to remove the last 2 characters, use :\nÂ =LEFT(D1,LEN(D1)-2) "},{"id":4,"href":"/docs/web/embed-pdf-in-html/","title":"Embed Pdf in HTML","section":"Web","content":"Afficher un pdf dans une page HTML #  Pour afficher un document pdf dans une page HTML, plusieurs solutions existent.\nVous pouvez par exemple utiliser les services de scribd.com ou tout simplement insÃ©rer le code HTML suivant dans votre page :\nAvec la balise embed (/!\\ non compatible sur naviguateurs mobiles)\n\u0026lt;embed src=\u0026#34;https://yoursite.com/yourdocument.pdf\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;400p\u0026#34;\u0026gt; ou avec la balise iframe qui est compatible sur naviguateur mobile.\n\u0026lt;iframe src=\u0026#34;https://docs.google.com/viewer?url=https://yoursite.com/pdf/yourdocument.pdf\u0026amp;embedded=true\u0026#34; style=\u0026#34;width:100%; height:500px;\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; Voici le rÃ©sultat :\n "}]