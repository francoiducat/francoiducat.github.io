[{"id":0,"href":"/posts/notions-reseau/","title":"Notions de bases en réseau","section":"Notes","content":" Notions de bases en réseau # Réseau (informatique) # Ensemble d\u0026rsquo;ordinateurs reliés entre eux (cables ou sans fil). Ces ordinateurs peuvent ainsi à distance:\nPartager des ressources (modem, disque dur, lecteur de CD-Rom, applications etc.) Echanger des données: documents, tchats etc. Cables réseau ou cable ethernet: # UTP-CAT5 (Unshielded Twist Pair Category 5) :100mégabit/seconde UTP-CAT6 (Unshielded Twist Pair Category 6): 1gigabit/seconde cables ethernet droits: relie un ordinateur à un switch cables ethernet croisés: relie 2 ordinateurs entre eux Carte réseau # Matériel qui permet d\u0026rsquo;accéder au réseau. C\u0026rsquo;est par là que les données transites. La carte réseau fourni une adresse MAC à l\u0026rsquo;ordinateur en question afin de l\u0026rsquo;identifier sur le réseau (adresse physique). Une carte réseau se fixe au port PCI de l\u0026rsquo;ordinateur.\nConcentrateur (Hub) # Matériel qui permet l\u0026rsquo;échange des données. Il reçoit des données par un port, et envoie ce qu\u0026rsquo;il reçoit aux autres ports. Il a une interface de réception (un port) et une interface de diffusion (plusieurs autres ports par où les autres ordinateurs sont connectés).\nCommutateur (switch)\nMatériel qui permet l\u0026rsquo;échange des données. Il transmet des données aux autres ordinateurs en se basant sur leurs adresses MAC\nRouteur # Matériel qui permet l\u0026rsquo;échange des données. Il est la frontière entre le réseau local (câbles Ethernet ou WIFI) et le réseau Interent (câble branché sur la prise téléphonique).\nPasserelle # Système qui permet de relier deux réseaux différents. Ça peut-être sous une machine sous un logiciel. Exemple 2 réseaux qui n\u0026rsquo;utiliseraient pas le même protocole.\nLAN (Local Area Network) ou WLAN (Wireless Local Area Network) # Réseau limité à un espace géographique comme un bâtiment par exemple, avec ou sans fil. C\u0026rsquo;est un réseau local.\nWAN (Wide Area Network) # Réseau étendu. Un WAN et un ensemble de LAN relié entre eux.\nTopologie de réseau # Bus # Etoile # Routeur, commutateur ou concentrateur se situe au centre du réseau et tous les ordinateurs y sont connectés. S\u0026rsquo;ils veulent communiquer entre eux ils doivent forcément passer par le routeur.\nMesh # ou maillé, tous les ordinateurs sont reliés entre eux par des cables.\nAnneau, hybride # Adresse IP # Adresse pour communiquer avec l\u0026rsquo;ordinateur. Elle est relative au réseau. C\u0026rsquo;est le seul moyen d\u0026rsquo;identification des machines sur Internet.\nOn distingue:\nIPv4 # 4 nombres compris entre 1 et 255, séparés par des points.\nUne adresse IPv4 est constituée de 32 bits séparés en 4 portions par des points. (1byte = 1octet = 8bits). Une adresse IP est donc constituée de 4 octets, ou 4 bytes soit 32 bits. Exemple : 192.168.0.10\nIPv6 # 8 groupes de 2 octets représentés en hexadécimal. Exemple 1fff:0011:0a88:85a3:6500:0320:ac1f:8001\nMasque de sous-réseau # Une partie supplémentaire de l\u0026rsquo;adresse où trouver une machine connectée au réseau.\nAdresse MAC # Adresse relative à la carte réseau. Identifiant unique attribué à la carte réseau. Exemple: 01:22:64:31:78:AC\nSous réseau # C\u0026rsquo;est un réseau dans un réseau. Plusieurs sous-réseaux peuvent faire partie du même réseau.\nMasque réseau # Nom du sous-réseau. Exemple : 255.255.255.0\nProtocole # Langue du sous-réseau pour communiquer avec un autre sous-réseau (dans le réseau).\nPour que 2 machines communiquent entre elles dans un réseau elles doivent:\nUtiliser le même protocole Appartenir au même sous-réseau Connaitre leur adresse IP Pour que 2 machines d\u0026rsquo;un sous-réseau différent communiquent entre elles il faut une passerelle.\nArchitecture réseau # client/serveur pair à pair (peer to peer): partage de fichiers Classes # Ensemble d\u0026rsquo;adresses IP. Chaque adresse IP appartient à une classe principale (plage). Chaque classe a un masque de sous-réseau par défaut. Dès que l\u0026rsquo;on doone une adresse IP à la carte réseau, le système d\u0026rsquo;exploitation lui assigne directement un masque de sous-réseau par défaut selon la classe à laquelle appartient l\u0026rsquo;adresse IP. Il existe 5 classes d\u0026rsquo;adresses IP: A, B, C, D, E.\nClasse A # Adresses IP se situent entre 1.0.0.0 et 127.255.255.255.\nMasque de sous-réseau par défaut : 255.0.0.0\nAdressess IP entre 127.0.0.0 et 127.255.255.255 sert pour les tests spécifiques.\nExemple : 110.168.0.10\nIci 110 est le network ID. On est dans le réseau 110\n168.0.10 est l\u0026rsquo;host ID soit l\u0026rsquo;adresse de la carte réseau\nGrâce à la répartition des octets entre network ID et host ID, 16 777 214 adresses IP par réseau sont disponibles et 126 réseaux.\nClasse B # Adresses IP entre 128.0.0.0 et 191.255.255.255.\nMasque de sous-réseau par défaut : 255.255.0.0.\nExemple: 170.40.0.6\nIci 170.40 est le network ID. On est dans le réseau 170.40\n0.6 est l\u0026rsquo;host ID. L\u0026rsquo;adresse 0.6 appartient au réseau 170.40\n65 534 ordinateurs par réseau.\nClasse C # Adresse IP entre 192.0.0.0 et 223.255.255.255.\nLe masque de sous-réseau par défaut est 255.255.255.0.\n254 adresses IP par réseau, et 2 097 152 réseaux.\nEnvoi de données dans le réseau:\nL\u0026rsquo;unicast : dans ce cas, on envoie des données à un seul ordinateur ;\nLe multicast : l\u0026rsquo;envoi des données se fait vers un groupe d\u0026rsquo;ordinateurs ;\nLe broadcast : on envoie des données à tous les ordinateurs du réseau.\nPour la classe C: l\u0026rsquo;adresse 255 est une adresse de type broadcast (d\u0026rsquo;où 254 adresses IP possibles par réseau dans la classe C et non pas 255 puisque cette adresse ne peut être prise par un hôte)\nPour la classe B: l\u0026rsquo;adresse 255.255 est l\u0026rsquo;adresse de broadcast\nPour la classe A: l\u0026rsquo;adresse 255.255.255 est l\u0026rsquo;adresse de broadcast\nClasse privée # Portée d\u0026rsquo;adresses IP dans une classe (A,B,C) réservée pour un usage particulier ou par convention.\nExemple:\nla portée 169.254.0.0 - 169.254.255.255 appartient à la classe privée réservé par Microsoft dans la classe B. la portée 192.168.0.0 - 192.168.255.255 appartient à une classe privée dans la classe C. Il faudra le service NAT pour accéder à Internet. la portée 172.16.0.0 à 172.31.255.255 appartient à une classe privé de la classe B. la portée 10.0.0.0 à 10.255.255.255 appartient à une classe privé de la classe A. NB: En général les FAI proposent des adresses appartenant à des classes privées.\n"},{"id":1,"href":"/posts/charger-ses-propres-fichiers-css-dans-wordpress/","title":"Charger ses propres fichiers .css et .js dans Wordpress","section":"Notes","content":" Charger ses propres fichiers .css et .js dans Wordpress # Objectif # Charger un ou plusieurs fichiers .js et/ou .css afin de créer une animation ou ajouter un effet de style.\nSolution # Sur un site \u0026ldquo;non wordpress\u0026rdquo; on pourrait inclure nos scripts entre les balises \u0026lt;head\u0026gt; de notre page HTML.\nAvec WordPress (3.X.X et 4.X.X) une des solutions possible est d\u0026rsquo;utiliser les méthodes\n_wp_enqueue_script_ _wp_enqueue_style_ du fichier function.php.\nVoici un exemple de code à inclure dans le fichier function.php :\n//Créer une fonction pour appeler les fichiers javascript et css \u0026lt;?php function load_my_files() { // Charger les fichiers SAUF sur l\u0026#39;administration du site if (!is_admin()) { //Load js files wp_enqueue_script(\u0026#39;script1\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/js/script1.js\u0026#39;); wp_enqueue_script(\u0026#39;script2\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/js/script2.js\u0026#39;); //Load css files wp_enqueue_style(\u0026#39;style2\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/css/style2.css\u0026#39;); wp_enqueue_style(\u0026#39;style1\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/css/style1.css\u0026#39;); } } // Charger notre fonction à l\u0026#39;initialisation add_action(\u0026#39;init\u0026#39;, \u0026#39;load_my_files\u0026#39;); ?\u0026gt; Puis déposer sur votre serveur les fichiers .js et .css à dans les dossiers créés à cet effet comme dans l\u0026rsquo;example ci-dessus\n"},{"id":2,"href":"/docs/devops/day-to-day-bash-commands/","title":"Day to Day Bash Commands","section":"Devops","content":" Day to day bash commands for developers # Bash commands # cd folder_name entrer dans un dossier cd .. : revenir au dossier précédant cat file_name : affiche le contenu d\u0026rsquo;un fichier pwd : dis moi où je suis ! mkdir folder_name : créer un dossier cd / : Aller à la racine du serveur cd : Aller au répertoire de l\u0026rsquo;utilisateur (la \u0026ldquo;home directory\u0026rdquo; de l\u0026rsquo;utilisateur) df -h : Affiche les informations sur le volume de stockage. (h pour human) du -hd1 (anciennement du -h --max-depth=1): Affiche les informations sur le volume de stockage du répertoire dans lequel on se trouve.(\u0026ldquo;disk free\u0026rdquo;,\u0026ldquo;disk usage\u0026rdquo;) rmdir file_name : supprimer un dossier rmdir -rf file_name : supprimer un dossier non vide. Attention, cela supprime tous le contenu à l\u0026rsquo;intérieur du dossier (sous dossiers et fichiers) touch nomdufichier : créer un fichier ou mettre à jour la date de modification sur un fichier existant. chmod 700 file_name : Modifier les permissions du fichier/dossier chmod 777 -R folder_name : Modifier les permissions du dossier ainsi que celles de tous les sous-dossiers et fichiers inclus chwon -R root:root folder_name : Modifie le propriétaire d\u0026rsquo;un dossier (avec sous dossiers et fichiers inclus dans mondossier) passwd utilisateur: Changer le mot de passe de l\u0026rsquo;utilisateur su - : Se connecter en root su -utilisateur : Se connecter avec utilisateur ls : Lister le contenu d\u0026rsquo;un dossier ls -l (ou ll) : Liste le contenu d\u0026rsquo;un dossier avec le détail (permission, user, group) ls -ltr : Afficher les fichiers du plus ancien au plus récent ls -a : Lister tout le contenu d\u0026rsquo;un dossier (dont les fichiers cachés) ls -h : Lister les repertoires en affichant le volume des fichiers de manière \u0026ldquo;lisible\u0026rdquo; ls -t | head -n 1 : Liste le dernier le fichier édité. Ici, la commande \u0026ldquo;head\u0026rdquo; permet d\u0026rsquo;afficher le nombre de ligne voulu par rapport au résultat de la commande ls (ici une seule ligne) ls -d */ : Lister UNIQUEMENT les repertoires. ~/ : équivaut à /home/dossierUser ls -l \u0026gt; ls-l.txt : Liste le contenu du répertoire dans le fichier ls-l.txt ls -l \u0026gt; ls-l.txt 2\u0026gt;\u0026amp;1 : Liste uniquement les erreurs liés à la commande ls -l dans le fichier ls-l.txt scp -r /Users/john/Documents/mondossier/* user@IP:~/mondossier : Envoyer un fichier serveur dont le contenu des dossiers scp -P 5555 /Users/john/archive.tar.gz user@IP:~/mondossier : Envoyer un fichier compressé en spécifiant le port. (-P) cp -rp /var/tmp/prestashop_1.5.2.0 /var/www/html/ : Déplacer (=copier/coller) un répertoire d\u0026rsquo;un emplacement A à un emplacement B en gardant les permissions des fichiers. tar -pczf nameoftarball.tar.gz directoryname/ Compresser et conserver les permissions des fichiers(-p) tar -xzvf nameoftarball.tar.gz : Décompresser une archive. [root@127.0.0.1 demo]#mv folder/* . : Déplace le contenu du dossier \u0026ldquo;folder\u0026rdquo; dans le dossier \u0026ldquo;demo\u0026rdquo; unzip package.zip -d /path/to/directory/to/unzip : Dézipper le contenu de \u0026ldquo;package.zip\u0026rdquo; en choisissant le répertoire de destination. gunzip -c backup.sql.gzip \u0026gt; backup.sql : Extraire le fichier \u0026ldquo;backup.sql.gzip\u0026rdquo; pour contourner l\u0026rsquo;erreur \u0026ldquo;Gunzip unknwon suffix\u0026rdquo; find / -name file.log : Recherche le fichier file.log à la racine find . -iname file.log : Recherche le fichier file.log dans le répertoire où l\u0026rsquo;on se trouve.(case sensitive : sensible aux majuscules et minuscules) find . -iname php.ini : Recherche le fichier php.ini dans le répertoire où l\u0026rsquo;on se trouve.(sans prendre en compte les majuscules et minuscules) find . -mtime -3 | grep test : Recherche les fichiers qui ont été modifié dans les 3 derniers jours et contenant \u0026ldquo;test\u0026rdquo; dans leur nom. find . -mtime +3 | grep test : Recherche les fichiers qui ont été modifié il y a plus de 3 jours et contenant \u0026ldquo;test\u0026rdquo; dans leur nom. locate php.ini : Recherche le fichier php.ini sur le serveur grep -lR \u0026quot;chaine de caractere\u0026quot; * : Rechercher une chaine de caractère dans tous les fichiers du dossier dans lequel on se trouve. find /search/in/this/folder/ -type d -name \u0026quot;wordpress\u0026quot; : Recherche le répertoire intitulé \u0026ldquo;wordpress\u0026rdquo; dans le répertoire /search/in/this/folder/ diff file1 file2 | more : Afficher les différences entre 2 fichiers; \u0026gt; fileToPurge.txt : Effacer le contenu du fichier sans supprimer le fichier lui-même. grep -Ri --color motarecherche /repertoire/ou/rechercher/ : Rechercher un mot dans un repertoire sans prendre en compte la casse et en affichant le mot à rechercher en couleur. sed -i 's/mot_a_rechercher/remplacé_par_celuici-meme/' fichier_en_question.txt : Commande de rechercher/remplacer de \u0026ldquo;mot_a_rechercher\u0026rdquo; en \u0026ldquo;remplacé_par_celuici-meme\u0026rdquo; dans le fichier fichier_en_question.txt sed -i 's/mot_a_rechercher/remplacé_par_celuici-meme/g' fichier_en_question.txt : Commande de rechercher/remplacer de \u0026ldquo;mot_a_rechercher\u0026rdquo; en \u0026ldquo;remplacé_par_celuici-meme\u0026rdquo; dans le fichier fichier_en_question.txt. Le /g permet de rechercher/remplacer plusieurs occurences de \u0026ldquo;mot_a_rechercher\u0026rdquo; sur une même ligne. grep motarechercher/etc/php.ini : Rechercher motarechercher dans le fichier php.ini grep -v motaexclure/etc/php.ini : Rechercher TOUT sauf motarechercher dans le fichier php.ini history : affiche l\u0026rsquo;historique des commandes history | grep install : Recherche dans l\u0026rsquo;historique des commandes celles qui contiennent le mot install history -c : Efface l\u0026rsquo;historique man command: Afficher les possibilités de la commande (Exemple: man ls) q : Quitter l\u0026rsquo;écran exit : Log out le user clear : Rafraichir l\u0026rsquo;écran shutdown -r now : Redémarrer le serveur uname -m : Déterminer si la version de Linux utilisée est en 32 bit ou 64 bit x86_64 \u0026raquo;\u0026gt; 64-bit kernel i686 \u0026raquo;\u0026gt; 32-bit kernel ps -fu $USER : Visualiser les USERS en activité.(\u0026ldquo;process statistics\u0026rdquo;) ps -ef | grep ftp : Visualiser les processus en activité contenant \u0026ldquo;ftp\u0026rdquo; service apache2 start \u0026amp; : Exécuter un script en tâche de fond. env : Affiche les variables d\u0026rsquo;environnement. top : Affiche les performances machines instantanées. Une fois dans le \u0026ldquo;top\u0026rdquo; en appuyant sur \u0026ldquo;SHIFT 1\u0026rdquo; permet d\u0026rsquo;afficher les performances de chaque CPU. Quick history search in terminal # Common search history is a combination of history and grep key words : history | grep word_to_search\nGreat alternative in a shortcut to search in your terminal history: Ctrl r + word_to_search\nFind a process running on a specific port # Find # lsof -n -i4TCP:60901\nStop # kill -9 PID\nPostgres commands # psql -h localhost -U username databasename : Connect to a database psql postgres : Open postgres prompt postgres=# \\list : List databases postgres=# \\connect databasename : Connect to a database from postgres prompt postgres=# \\dt+ : List tables with details (dans l\u0026rsquo;invité de commande postgres) postgres=# DROP DATABASE db_name WITH (FORCE); Drop database with force postgres=# CREATE DATABASE my_db OWNER username; Create database specific the owner postgres=# SELECT usename, client_addr, application_name, count(1) FROM pg_stat_activity group by 1,2,3;: Track user activity pg_dump -d database_name -t table_to_dump \u0026gt; dumped_table.sql: Dump table COPY table_name FROM '/path/to/csv/dump.txt' WITH (FORMAT csv);: Insert data from csv file into a table (No header needed in the text file) SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename ='john.doe': Track user activity SELECT pg_sequence_last_value('sequence_name'): Show sequence last value SELECT nextval('sequence_name'): Show sequence next value SELECT * from information_schema.sequences WHERE sequence_name='sequence_name': Show sequence details Mysql commands # mysql -u user -p mypassword dbname : Se connecter à une base de données mysql -u user -pmypassword dbname : Se connecter à une base de données en spécifiant le mot de passe. (Retirer l\u0026rsquo;espace) /Applications/MAMP/Library/bin/mysql -u user -p dbname : Se connecter à une base de données de l\u0026rsquo;application MAMP. mysqldump -pot -u [uname] -p[pass] [dbname] \u0026gt; [backupfile.sql] : Dump mysql mysqldump -pot -R -u [uname] -p[pass] [dbname] \u0026gt; [backupfile.sql] : Dump mysql, le -R permet d\u0026rsquo;inclure les procédures stockées mysqldump -u [uname] -p[pass] [dbname] | gzip -9 \u0026gt; [backupfile.sql.gz] : Dump avec compression mysql -u [uname] -p[pass] [db_to_restore] \u0026lt; [backupfile.sql] : Restaurer mysqldump gunzip \u0026lt; [backupfile.sql.gz] | mysql -u [uname] -p [pass] [dbname] : Restaurer un dump avec compression mysqlimport -u [uname] -p [pass] [dbname] [backupfile.sql] : Restaurer une base de données déjà existante mysql –u [uname] -p [dbname] \u0026lt; [script.sql] : Jouer le fichier script.sql nohup sh script.sh \u0026gt; script_out.log \u0026amp; : Permet de jouer un script sql en tâche de fond. Cela s\u0026rsquo;avère utile pour jouer des scripts dont les temps d\u0026rsquo;exécution sont long. En cas de coupure réseau avec la machine distante par exemple, le script continuera de s\u0026rsquo;exécuter. VI commands # vim nomdufichier : éditer un fichier / mot_a_rechercher : recherche \u0026ldquo;mot_a_rechercher\u0026rdquo; (vers le bas du fichier) dans fichier ouvert avec vi. Après avoir saisi / mot_a_rechercher Taper n : Permet de rechercher les occurrences suivantes du mot à rechercher ? mot_a_rechercher : recherche \u0026ldquo;mot_a_rechercher\u0026rdquo; vers le haut du fichier :166 : Aller à la ligne 166 i : i pour Insert. Permet d\u0026rsquo;éditer le fichier :wq : Sauvegarder (Write) et Quitter dd : Efface la ligne où on se situe. :set paste : à utiliser avec l\u0026rsquo;éditeur vi avant d\u0026rsquo;insérer du contenu pour conserver la forme du copier/coller. (espacement de lignes etc.) gg : Aller à la fin du fichier. G : Aller au début du fichier. :echo line('$') : Permet d\u0026rsquo;afficher le nombre de lignes du fichier en question. Network commands # host nomdedomaine.com : Affiche l\u0026rsquo;adresse IP du domaine hostname : Affiche le nom de la machine nslookup nomdedomaine.com : Affiche l\u0026rsquo;adresse IP du domaine tracert nomdedomaine.com : Affiche la route réseau empruntée telnet nomdedomaine 53 : Moyen de vérifier que ma machine peut communiquer avec nomdedomaine sur le port 53 Split a hug file # Split # split -b 512M myFile.gzip qui donne : xaa xab xac xad etc.\nUnsplit # cat x* \u0026gt; myFile.gzip Node commands # node -v: Display node version sudo npm cache clean -f (clear npm cache) sudo npm install -g n sudo n stable: Install node latest sable release version Edit npm registry # Set # npm config set registry https://your-custom-npm-registry.com/\nThis command updates your .npmrc file with your new registry URL: registry=https://your-custom-npm-registry.com/\nGet # npm config get registry\n"},{"id":3,"href":"/docs/devops/day-to-day-kubernetes-command/","title":"Day to Day Kubernetes Command","section":"Devops","content":" Kubernetes \u0026amp; Docker commands for developers # Export pod logs # kubectl logs pod-name -n namespace-name \u0026gt;\u0026gt; /export/path/file.txt Use bach inside a pod # kubectl exec -it myPod -n myNameSpace -- /bin/bash Run container # docker run -p 8080:80 --name=nginx Run specific docker service # docker-compose up -d myDatabaseApp "},{"id":4,"href":"/docs/devops/every-day-git-commands/","title":"Every Day Git Commands","section":"Devops","content":" Every day Git commands for developers # Here are some day to day useful git commands\nRefresh git repo after .gitignore edition # When you add a new file to the .gitignore it is not immediatly ignored. It stills appears on git status\nTo refresh the git repo\ngit rm -rf --cached . or\ngit rm -rf --cached specifyOnlyTheFolderToResfreshInsteadOftheEntireRepo Discard changes on a file # git checkout fileYouDiscardChanges Show all remotes # This show origin and upstream remotes\ngit remote -v git remote show origin #shows branches, tags etc. git remote show upstream #shows branches, tags etc. Add upstream remote # (vs origin remote)\ngit remote add upstream git@github.com:username/git-repo.git Remove a remote file # Remove a remote file or directory from a Git repository without deleting it from the local filesystem\nFor single file: # git rm --cached myremotefiletodelete.log git commit -m \u0026#34;remove file from repo\u0026#34; git push For single directory: # git rm --cached -r myremotedirectortytodelete git commit -m \u0026#34;remove folder from repo\u0026#34; git push Shortcut add \u0026amp; commit all files # Without shortcut\ngit add . git commit -m \u0026#34;commit message\u0026#34; With shortcut\ngit commit -am \u0026#34;commit message\u0026#34; Show git history # using pretty format\ngit log --pretty=format:\u0026#34;%h - %an, %ar : %s\u0026#34; Changing old commit messages # git rebase -i HEAD~3 Then this prompt pops up\npick f45c433 update readme pick e023d22 edit README pick c245d34 init readme # Rebase 9fdb3bd..f7fde4a onto 9fdb3bd # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \u0026#34;squash\u0026#34;, but discard this commit\u0026#39;s log message # x, exec = run command (the rest of the line) using shell # # These lines can be re- ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out Then replace pick with reword. Save and close.\nFinih with git push force:\ngit push --force "},{"id":5,"href":"/docs/java/springboot-graphql-client/","title":"Springboot Graphql Client","section":"Java","content":" Minimal Graphql client request with Springboot # https://unsplash.com/license Photo from Farzad Nazifi under Unsplash Licence\nIntroduction # Most API’s architectural styles are RESTful. For some good reasons, APIs can also be built based on a Graphql architecture style. I recently had the opportunity to call one of them. I discovered and tried several ways to perform this Graphql request, all with pros and cons. In this article, I will describe how to perform a minimal Graphql client request with Spring Boot and WebClient.\nRequirements # A Spring Boot Project is mandatory. I am using maven here.\nDependencies # Mandatory # WebFlux dependency to get WebClient:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-webflux\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Starter Test dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; to make sure Spring Application Context loads:\nOptional # Lombok because it saves boilerplate code:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; Graphql Server # I found this public Countries Graphql API from trevorblades. This API uses this Countries List as data sources.\nGraphql Client # Graphql request body # 1 Basic curl to get familiar with Graphql client request # A Graphql request requires a body request containing at least a query. Optionally a variable and an operationName. (operationName is only required if multiple operations are present in the query. I don’t use it in this tutorial).\nJust like this curl example:\ncurl \\ --location \\ --request POST \u0026#39;https://countries.trevorblades.com/\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data-raw \u0026#39;{\u0026#34;query\u0026#34;:\u0026#34;query { \\n country(code: \\\u0026#34;BE\\\u0026#34;) { \\n name\\n capital\\n currency\\n }\\n}\u0026#34;,\u0026#34;variables\u0026#34;:{}}\u0026#39; You may copy/paste it into your terminal. The response should look like this\n{ \u0026#34;data\u0026#34;: { \u0026#34;country\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Belgium\u0026#34;, \u0026#34;capital\u0026#34;: \u0026#34;Brussels\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;EUR\u0026#34; } } } So far we have a working Graphql curl request. Let’s now code it in java.\n2. Java Graphql query # 2.1 GraphqlRequestBody # Let’s create the GraphqlRequestBody object.\n2.2 Graphql Query # Let’s now create a getCountryDetails.graphql file in the resources folder of the project.\nquery($code: ID!) { country(code: $code) { name capital currency } } 2.3 Graphql Variables # Let’s create a variables.graphql file in the resources folder.\n{ \u0026#34;code\u0026#34; : \u0026#34;countryCode\u0026#34; } Graphql response # Now that I have my Graphql request body and based on what I’m expecting from the API, let\u0026rsquo;s handle the response\nData Transfer Object # I create my CountryDto Object :\n@Getter public class CountryDto { private CountryData data; @Getter public class CountryData { private Country country; @Getter public class Country { private String name; private String capital; private String currency; } } } Eventually, let’s create the CountryClient class 😀.\nI said it was a minimal Graphql client request, didn’t I?\n@Service @Slf4j public class CountryClient { private final String url; public CountryClient(@Value(\u0026#34;https://countries.trevorblades.com/\u0026#34;) String url) { this.url = url; } public CountryDto getCountryDetails(final String countryCode) throws IOException { WebClient webClient = WebClient.builder().build(); GraphqlRequestBody graphQLRequestBody = new GraphqlRequestBody(); final String query = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;getCountryDetails\u0026#34;); final String variables = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;variables\u0026#34;); graphQLRequestBody.setQuery(query); graphQLRequestBody.setVariables(variables.replace(\u0026#34;countryCode\u0026#34;, countryCode)); return webClient.post() .uri(url) .bodyValue(graphQLRequestBody) .retrieve() .bodyToMono(CountryDto.class) .block(); } } GraphqlSchemaReaderUtil class to read Graphql files stored in the resource folder:\n@Slf4j public final class GraphqlSchemaReaderUtil { public static String getSchemaFromFileName(final String filename) throws IOException { return new String( GraphqlSchemaReaderUtil.class.getClassLoader().getResourceAsStream(\u0026#34;graphql/\u0026#34; + filename + \u0026#34;.graphql\u0026#34;).readAllBytes()); } } Let’s just log the Graphql response in the main method of our Spring Boot App:\n@SpringBootApplication @Slf4j public class GraphqlClientApplication { public static void main(String[] args) throws IOException { ConfigurableApplicationContext context = SpringApplication.run(GraphqlClientApplication.class, args); CountryClient client = (CountryClient) context.getBean(\u0026#34;countryClient\u0026#34;); ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter(); CountryDto countryDto = client.getCountryDetails(\u0026#34;BE\u0026#34;); log.info(ow.writeValueAsString(countryDto)); } } Now, your console should log the response like this:\nUnit Test # Unit test with MockWebServer can be found here.\nTL;DR # Go to Github Repo.\n"},{"id":6,"href":"/docs/process/the-virtuous-cycle-of-code-review/","title":"The Virtuous Cycle of Code Review","section":"Process","content":" The virtuous cycle of Code Reviews # https://unsplash.com/license Photo by Alvaro Reyes on Unsplash\nIntroduction # Yet another article dealing with Code Reviews. Indeed it is. But I really believe this is worth it! I have little experience as a developer within Agile teams but enough to be convinced how much benefits and serenity it brings to people, products and organisations.\nLet\u0026rsquo;s get straight to the point.\nWhat are Code Reviews? # Code Reviews are a stage in the software development life cycle where developers check each other’s code for:\ninconsistencies with system and/or business requirements bugs readability sufficient test coverage. irregular formatting compliance with enterprise coding standards Why do Code Reviews? # Because as human beings we make mistakes, don\u0026rsquo;t we? Honestly, do you know any developer that always produces code without any bugs? I don\u0026rsquo;t. Looking at the requirements, are all cases fully implemented? Are the new automated tests sufficient for the new code? Do existing automated tests need to be rewritten to account for changes in the code? Does the new code conform to existing style guidelines?\nI let you answer these questions. For me, doing code reviews is a major pillar for the quality of the product that is delivered.\nIn the meantime, in \u0026ldquo;real\u0026rdquo; life, doing Code Reviews isn\u0026rsquo;t always a process that flows naturally.\nWhy not? # 10 lines of code = 10 issues. 500 lines of code = “looks fine.” Code reviews. — I Am Devloper (@iamdevloper) November 5, 2013 First, unless I\u0026rsquo;m mistaken, the Code Review process isn\u0026rsquo;t learned at school. Moreover, within organisations, the “traditional” approach to Code Reviews is often perceived as:\nTime-consuming # Instead of doing Code Reviews developers could write more code and deliver very much expected features by end users!\nSure, it takes time. But that time isn\u0026rsquo;t wasted–far from it. Skipping code reviews is only advisable for trivial changes.\nAn Inefficient process # Code Reviews are just more interruptions while we could, again, deliver more features for our clients.\nFrustrating # Unfortunately, during Code Reviews, developers don\u0026rsquo;t always give or receive positive and constructive feedback which sometimes leads to some kind of tension and frustration.\nBenefits # To my mind the most important benefits of code reviews are for people:\nPeople # Empowering skills # Code reviews enabled me to become a more skilled developer. This is a great exercise to get used to reading code. Your peers don\u0026rsquo;t always code as you do so you discover new methods and techniques.\nMentoring # When new members join the team, more seasoned engineers mentor the newer members. Sharing techniques transcend seniority, where every developer is equally able to share, cooperate and improve their skills. I learned a lot from code reviews feedback.\nPositive peer pressure # When you know that your code will be reviewed by a teammate, you make an extra effort to ensure that all tests are passing and the code is as well-designed. That mindfulness also tends to make the coding process itself go smoother and, ultimately, faster.\nCollective code ownership # Requiring code review before merging ensures that no code gets in unreviewed and that the whole team takes ownership of the code. Collective code ownership helps not only when new people start with the team, but as well when people go on vacation.\nOnboarding # Making source code readable by anyone who might be introduced to the project at any given time during development boosts the onboarding of new team members.\nTransferring knowledge # Code reviews help share knowledge across the team. It also avoids having one single person have the knowledge on some processes (which put the team at risk.)\nEnabling time off # Nobody likes to be the sole point of contact on a piece of code. Likewise, nobody wants to dive into a critical piece of code they didn’t write–especially during a production emergency. If you find yourself tied to your desk on the version control system, code review is an excellent way to find freedom. Freedom to take that needed vacation, or freedom to spend some time working on a different area of the product.\nProduct # Code Reviews bring benefits to the product ensuring consistency, robustness, and sustainability.\nConsistent Design and Implementation # Code reviews serve as a check and balance against different interpretations of the scope and requirements. Code reviews facilitate interactions about the codebase. Often, teams have hidden knowledge within the code that surfaces during code reviews. Newer members, with fresh eyes, discover generally areas that need a new perspective. Code reviews also helps ensure new insight is tempered with existing knowledge.\nEnsuring maintainability # Code reviews are useful in the long run as team members continue to change in projects.\nQuality \u0026amp; Performance # It gives a fresh set of eyes to identify coding errors that can eventually lead to serious bugs.\nDesign – Is the code well designed? Naming conventions – Are there readable names for classes, variables, and methods for ease of understanding? Comments – Are the comments useful, meaningful, and clear? Conciseness - Can we shorten the code? (/!\\ less readability!) Complexity – Can the code be made simpler? Will it be easy for future developers to understand the code? Tests - Are the new automated tests sufficient for the new code? Documentation - Is it well-documented? Eventually, it helps to find bugs early and often.\nCompany # I do believe that sereine people and high-quality products serve successful organizations. That\u0026rsquo;s the virtuous cycle of code reviews.\nLast but not least, code reviews save the company money.\nSaving money # Code reviews are best practices, but they take the time that your leadership may have decided is better spent on pushing forward with projects and getting applications to market faster. Have you ever, however, sat down with a calculator and figured out exactly what it’s costing your business not to perform code reviews?\nWell, I suggest you have a look at SmartBear Code Review ROI calculator. The tool, based on data from SmartBear’s customers as well as industry benchmarks, allows you to see what code reviews could save your business – and what it costs if you forego them.\nHere is an example:\nPrerequisites # In order to be efficient, several prerequisites to codes reviews should be implemented.\nCoding style # Decide and implement a coding style that every developer follows to avoid reviewing old codebase unnecessarily.\nCode review tools # Use a source code repository (like github.com) that usually gives you the possibility to perform code reviews.\nRespectful and constructive feedback # Even though it reads like a no-brainer, code reviews do put the code author in a vulnerable position, so you must be considerate of that. Your job is to give constructive and valuable feedback but also to do so in a respectful manner. It is just so easy to hurt someone\u0026rsquo;s feelings – especially in written form. Too often time pressure might make you give a sloppy answer that can be misinterpreted. Giving constructive feedback and being positive as we receive feedback could be yet another long article ;-)\nBe open to suggested changes # Receiving unexpected comments might make you tense and defensive. Try to prepare yourself mentally and work on your ability to be open to suggestions and different viewpoints. Always start with the assumption that the reviewer had the best intention. If some feedback made you uncomfortable try to sort things out as soon as possible.\nGo and talk in person if necessary # Code review tools and chat tools allow us to communicate with our peers in an asynchronous and effortless way. Sometimes it is a good idea to have more personal face-to-face conversations to resolve some complex issues.\nEnsure traceability for decisions # Even though less traceable conversations, such as face-to-face or video calls can make a big difference in team dynamics, it is important to document the discussion. Especially the code review outcome should be tracked for future reference by using traceable tools such as the code review tool. The code review tool is the right communication channel for all simple matters, as it allows the whole team to follow along, and enables to look up decisions and understand code development after the fact.\nBest Practices # Having prerequisites in place, you may also adopt a few best practices to smooth code reviews.\nCI checks # Once a pull request is triggered, you can set up your code repository to check if the branch is \u0026ldquo;mergeable.\u0026rdquo; For example : 2 peers approbations required before merge.\nBe fast # If you are not in the middle of a focused task, you should do a code review shortly after it comes in. One business day is the maximum time it should take to respond to a code review request At Google, they optimize for the speed at which a team of developers can produce a product together, as opposed to optimizing for the speed at which an individual developer can write code. The speed of individual development is important, it’s just not as important as the velocity of the entire team. When code reviews are slow, several things happen: The velocity of the team as a whole is decreased. Yes, the individual who doesn’t respond quickly to the review gets other work done. However, new features and bug fixes for the rest of the team are delayed by days, weeks, or months as each CL waits for review and re-review. Developers start to protest the code review process. If a reviewer only responds every few days, but requests major changes to the CL each time, that can be frustrating and difficult for developers. Often, this is expressed as complaints about how “strict” the reviewer is being. If the reviewer requests the same substantial changes (changes which really do improve code health), but responds quickly every time the developer makes an update, the complaints tend to disappear. Most complaints about the code review process are actually resolved by making the process faster.\nFocus on core issues, less nit-picking # Your goal as a reviewer should be to help with core issues, such as bugs, architectural problems, structural problems or problems that will lead to maintainability issues. Obviously, if you see typos, badly named variables or styling issues, you might also point that out. Still, this is not your main tasks and, understandably, over discussing minor issues isn’t valuable to code authors.\nSpeed vs. Interruption # There is one time where the consideration of personal velocity trumps team velocity. If you are in the middle of a focused task, such as writing code, don’t interrupt yourself to do a code review. Research has shown that it can take a long time for a developer to get back into a smooth flow of development after being interrupted. So interrupting yourself while coding is actually more expensive to the team than making another developer wait a bit for a code review. Instead, wait for a break point in your work before you respond to a request for review. This could be when your current coding task is completed, after lunch, returning from a meeting, coming back from the breakroom, etc.\nIntegrate code review into your daily routine # Reduce task switching as it kills productivity # Review frequently not in a big bang fashion # Give feedback in a timely manner # Conclusion # Resistance to change always leads to a status quo for which there is a long way to go before progress can be made.\nPeer reviews are a defining principle of Agile, playing a critical role in creating consistency in the source code and setting the stage for better QA testing and smoother integration.\nNot only do code reviews help make me a better developer, but it ensures the long-term success and proper development of our product.\nSources:\nhttps://www.brightspot.com/learn/articles/5-reasons-why-the-code-review-process-is-critical-for-developers https://smartbear.com/learn/code-review/agile-code-review-process/ https://www.browserstack.com/guide/code-review-benefits https://smartbear.com/learn/code-review/why-review-code/ https://google.github.io/eng-practices/review/reviewer/speed.html https://workplace.stackexchange.com/questions/98250/slowed-down-by-code-reviews https://www.michaelagreiler.com/code-review-best-practices/ https://www.atlassian.com/agile/software-development/code- https://www.devprojournal.com/software-development-trends/how-much-money-do-code-reviews-save-software-developers/ https://smartbear.com/product/collaborator/roi-calculator/\n"},{"id":7,"href":"/docs/productivity/google-spreadsheet-tricks/","title":"Google Spreadsheet Tricks","section":"Productivity","content":" Google spreadsheet tricks # Remove characters from a string in a cell with Google spreadsheet # Goal # Remove the first 2 characters from a string in cell D1 :\n=RIGHT(D1,LEN(D1)-2) Explanations # LEN(D1) returns the length of the string in a cell. RIGHT(D1, X) returns a substring from the end. First argument is the string. Seconde argument is the length of the substring to return. Alternatively, to remove the last 2 characters, use :\n=LEFT(D1,LEN(D1)-2) "},{"id":8,"href":"/docs/productivity/mac-screen-record-with-audio/","title":"MAC Screen Record With Audio","section":"Productivity","content":" Mac OS Screen record with audio for free # This video explains very clearly how to record your screen with audio on mac os for free.\nWithout audio just use quicktime:\nSources # https://github.com/ExistentialAudio/BlackHole/wiki/Multi-Output-Device "},{"id":9,"href":"/docs/productivity/save-storage-pdf-images-videos/","title":"Save Storage Pdf Images Videos","section":"Productivity","content":" Compress PDF offline # I found this great tool to compress pdf (python script) from the command line.\nRequirements # Python # Check your python version\n➜ ~ python --version Python 3.8.9 Ghoscript # Check your ghoscript version\n➜ ~ gs GPL Ghostscript 10.0.0 (2022-09-21) Setup # Add this command in your .bash_profile or .zshrc file\n# Usage: spdf [input file] [output file] [screen*|ebook|printer|prepress] spdf() { gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-\u0026#34;screen\u0026#34;} -dCompatibilityLevel=1.4 -sOutputFile=\u0026#34;$2\u0026#34; \u0026#34;$1\u0026#34; } Usage # spdf BigFile.pdf SmallFile.pdf ebook Image command lines # Batch resize image # Usage # ~ sips -Z 720 *.jpg Adjsut max image ratio examples: 640,720,1024,1280 etc.\nCombine two images into one # Prerequisites # ~ brew install imagemagick Usage # ~ convert +append image1.png image2.png combined_image.png Result # Image 1: # Image 2: # Combined image: # Compress Video with ffmpeg # Requirements # ffmpeg Compress # ffmpeg -i input.mp4 -r 15 output.mp4 Reduce half original size # ffmpeg -i input.mp4 -vf \u0026#34;scale=iw/2:ih/2\u0026#34; half-size.mp4 Video to gif # ffmpeg -i input.mp4 -r 15 output.gif Gmail clean # larger_than:5m smaller_than:8M size:5mb has:attachment before: 2011 after:2005/04/17 "},{"id":10,"href":"/docs/web/embed-pdf-in-html/","title":"Embed Pdf in HTML","section":"Web","content":" Afficher un pdf dans une page HTML # Pour afficher un document pdf dans une page HTML, plusieurs solutions existent.\nVous pouvez par exemple utiliser les services de scribd.com ou tout simplement insérer le code HTML suivant dans votre page :\nAvec la balise embed (/!\\ non compatible sur naviguateurs mobiles)\n\u0026lt;embed src=\u0026#34;https://yoursite.com/yourdocument.pdf\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;400p\u0026#34;\u0026gt; ou avec la balise iframe qui est compatible sur naviguateur mobile.\n\u0026lt;iframe src=\u0026#34;https://docs.google.com/viewer?url=https://yoursite.com/pdf/yourdocument.pdf\u0026amp;embedded=true\u0026#34; style=\u0026#34;width:100%; height:500px;\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; Voici le résultat :\n"},{"id":11,"href":"/gallery/gallery/","title":"Gallery","section":"Gallery","content":" Gallery # "}]