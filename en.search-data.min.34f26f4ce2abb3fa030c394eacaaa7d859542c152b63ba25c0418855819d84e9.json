[{"id":0,"href":"/posts/notions-reseau/","title":"Notions de bases en réseau","section":"Archives","content":"Notions de bases en réseau #  Réseau (informatique) #  Ensemble d\u0026rsquo;ordinateurs reliés entre eux (cables ou sans fil). Ces ordinateurs peuvent ainsi à distance:\n Partager des ressources (modem, disque dur, lecteur de CD-Rom, applications etc.) Echanger des données: documents, tchats etc.  Cables réseau ou cable ethernet: #   UTP-CAT5 (Unshielded Twist Pair Category 5) :100mégabit/seconde UTP-CAT6 (Unshielded Twist Pair Category 6): 1gigabit/seconde cables ethernet droits: relie un ordinateur à un switch cables ethernet croisés: relie 2 ordinateurs entre eux  Carte réseau #  Matériel qui permet d\u0026rsquo;accéder au réseau. C\u0026rsquo;est par là que les données transites. La carte réseau fourni une adresse MAC à l\u0026rsquo;ordinateur en question afin de l\u0026rsquo;identifier sur le réseau (adresse physique). Une carte réseau se fixe au port PCI de l\u0026rsquo;ordinateur.\nConcentrateur (Hub) #  Matériel qui permet l\u0026rsquo;échange des données. Il reçoit des données par un port, et envoie ce qu\u0026rsquo;il reçoit aux autres ports. Il a une interface de réception (un port) et une interface de diffusion (plusieurs autres ports par où les autres ordinateurs sont connectés).\nCommutateur (switch)\nMatériel qui permet l\u0026rsquo;échange des données. Il transmet des données aux autres ordinateurs en se basant sur leurs adresses MAC\nRouteur #  Matériel qui permet l\u0026rsquo;échange des données. Il est la frontière entre le réseau local (câbles Ethernet ou WIFI) et le réseau Interent (câble branché sur la prise téléphonique).\nPasserelle #  Système qui permet de relier deux réseaux différents. Ça peut-être sous une machine sous un logiciel. Exemple 2 réseaux qui n\u0026rsquo;utiliseraient pas le même protocole.\nLAN (Local Area Network) ou WLAN (Wireless Local Area Network) #  Réseau limité à un espace géographique comme un bâtiment par exemple, avec ou sans fil. C\u0026rsquo;est un réseau local.\nWAN (Wide Area Network) #  Réseau étendu. Un WAN et un ensemble de LAN relié entre eux.\nTopologie de réseau #  Bus #  Etoile #  Routeur, commutateur ou concentrateur se situe au centre du réseau et tous les ordinateurs y sont connectés. S\u0026rsquo;ils veulent communiquer entre eux ils doivent forcément passer par le routeur.\nMesh #  ou maillé, tous les ordinateurs sont reliés entre eux par des cables.\nAnneau, hybride #  Adresse IP #  Adresse pour communiquer avec l\u0026rsquo;ordinateur. Elle est relative au réseau. C\u0026rsquo;est le seul moyen d\u0026rsquo;identification des machines sur Internet.\nOn distingue:\nIPv4 #  4 nombres compris entre 1 et 255, séparés par des points.\nUne adresse IPv4 est constituée de 32 bits séparés en 4 portions par des points. (1byte = 1octet = 8bits). Une adresse IP est donc constituée de 4 octets, ou 4 bytes soit 32 bits. Exemple : 192.168.0.10\nIPv6 #  8 groupes de 2 octets représentés en hexadécimal. Exemple 1fff:0011:0a88:85a3:6500:0320:ac1f:8001\nMasque de sous-réseau #  Une partie supplémentaire de l\u0026rsquo;adresse où trouver une machine connectée au réseau.\nAdresse MAC #  Adresse relative à la carte réseau. Identifiant unique attribué à la carte réseau. Exemple: 01:22:64:31:78:AC\nSous réseau #  C\u0026rsquo;est un réseau dans un réseau. Plusieurs sous-réseaux peuvent faire partie du même réseau.\nMasque réseau #  Nom du sous-réseau. Exemple : 255.255.255.0\nProtocole #  Langue du sous-réseau pour communiquer avec un autre sous-réseau (dans le réseau).\nPour que 2 machines communiquent entre elles dans un réseau elles doivent:\n Utiliser le même protocole Appartenir au même sous-réseau Connaitre leur adresse IP  Pour que 2 machines d\u0026rsquo;un sous-réseau différent communiquent entre elles il faut une passerelle.\nArchitecture réseau #   client/serveur pair à pair (peer to peer): partage de fichiers  Classes #  Ensemble d\u0026rsquo;adresses IP. Chaque adresse IP appartient à une classe principale (plage). Chaque classe a un masque de sous-réseau par défaut. Dès que l\u0026rsquo;on doone une adresse IP à la carte réseau, le système d\u0026rsquo;exploitation lui assigne directement un masque de sous-réseau par défaut selon la classe à laquelle appartient l\u0026rsquo;adresse IP. Il existe 5 classes d\u0026rsquo;adresses IP: A, B, C, D, E.\nClasse A #  Adresses IP se situent entre 1.0.0.0 et 127.255.255.255.\nMasque de sous-réseau par défaut : 255.0.0.0\nAdressess IP entre 127.0.0.0 et 127.255.255.255 sert pour les tests spécifiques.\nExemple : 110.168.0.10\nIci 110 est le network ID. On est dans le réseau 110\n168.0.10 est l\u0026rsquo;host ID soit l\u0026rsquo;adresse de la carte réseau\nGrâce à la répartition des octets entre network ID et host ID, 16 777 214 adresses IP par réseau sont disponibles et 126 réseaux.\nClasse B #  Adresses IP entre 128.0.0.0 et 191.255.255.255.\nMasque de sous-réseau par défaut : 255.255.0.0.\nExemple: 170.40.0.6\nIci 170.40 est le network ID. On est dans le réseau 170.40\n0.6 est l\u0026rsquo;host ID. L\u0026rsquo;adresse 0.6 appartient au réseau 170.40\n65 534 ordinateurs par réseau.\nClasse C #  Adresse IP entre 192.0.0.0 et 223.255.255.255.\nLe masque de sous-réseau par défaut est 255.255.255.0.\n254 adresses IP par réseau, et 2 097 152 réseaux.\nEnvoi de données dans le réseau:\nL\u0026rsquo;unicast : dans ce cas, on envoie des données à un seul ordinateur ;\nLe multicast : l\u0026rsquo;envoi des données se fait vers un groupe d\u0026rsquo;ordinateurs ;\nLe broadcast : on envoie des données à tous les ordinateurs du réseau.\nPour la classe C: l\u0026rsquo;adresse 255 est une adresse de type broadcast (d\u0026rsquo;où 254 adresses IP possibles par réseau dans la classe C et non pas 255 puisque cette adresse ne peut être prise par un hôte)\nPour la classe B: l\u0026rsquo;adresse 255.255 est l\u0026rsquo;adresse de broadcast\nPour la classe A: l\u0026rsquo;adresse 255.255.255 est l\u0026rsquo;adresse de broadcast\nClasse privée #  Portée d\u0026rsquo;adresses IP dans une classe (A,B,C) réservée pour un usage particulier ou par convention.\nExemple:\n la portée 169.254.0.0 - 169.254.255.255 appartient à la classe privée réservé par Microsoft dans la classe B. la portée 192.168.0.0 - 192.168.255.255 appartient à une classe privée dans la classe C. Il faudra le service NAT pour accéder à Internet. la portée 172.16.0.0 à 172.31.255.255 appartient à une classe privé de la classe B. la portée 10.0.0.0 à 10.255.255.255 appartient à une classe privé de la classe A.  NB: En général les FAI proposent des adresses appartenant à des classes privées.\n"},{"id":1,"href":"/posts/charger-ses-propres-fichiers-css-dans-wordpress/","title":"Charger ses propres fichiers .css et .js dans Wordpress","section":"Archives","content":"Charger ses propres fichiers .css et .js dans Wordpress #  Objectif #  Charger un ou plusieurs fichiers .js et/ou .css afin de créer une animation ou ajouter un effet de style.\nSolution #  Sur un site \u0026ldquo;non wordpress\u0026rdquo; on pourrait inclure nos scripts entre les balises \u0026lt;head\u0026gt; de notre page HTML.\nAvec WordPress (3.X.X et 4.X.X) une des solutions possible est d\u0026rsquo;utiliser les méthodes\n _wp_enqueue_script_ _wp_enqueue_style_  du fichier function.php.\nVoici un exemple de code à inclure dans le fichier function.php :\n//Créer une fonction pour appeler les fichiers javascript et css \u0026lt;?php function load_my_files() { // Charger les fichiers SAUF sur l\u0026#39;administration du site  if (!is_admin()) { //Load js files  wp_enqueue_script(\u0026#39;script1\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/js/script1.js\u0026#39;); wp_enqueue_script(\u0026#39;script2\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/js/script2.js\u0026#39;); //Load css files  wp_enqueue_style(\u0026#39;style2\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/css/style2.css\u0026#39;); wp_enqueue_style(\u0026#39;style1\u0026#39;, \u0026#39;/wp-content/themes/custom_theme/css/style1.css\u0026#39;); } } // Charger notre fonction à l\u0026#39;initialisation  add_action(\u0026#39;init\u0026#39;, \u0026#39;load_my_files\u0026#39;); ?\u0026gt; Puis déposer sur votre serveur les fichiers .js et .css à dans les dossiers créés à cet effet comme dans l\u0026rsquo;example ci-dessus\n"},{"id":2,"href":"/docs/java/springboot-graphql-client/","title":"Springboot Graphql Client","section":"Java","content":"Minimal Graphql client request with Springboot #  https://unsplash.com/license Photo from Farzad Nazifi under Unsplash Licence\nIntroduction #  Most API’s architectural styles are RESTful. For some good reasons, APIs can also be built based on a Graphql architecture style. I recently had the opportunity to call one of them. I discovered and tried several ways to perform this Graphql request, all with pros and cons. In this article, I will describe how to perform a minimal Graphql client request with Spring Boot and WebClient.\nRequirements #  A Spring Boot Project is mandatory. I am using maven here.\nDependencies #  Mandatory #  WebFlux dependency to get WebClient:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-webflux\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Starter Test dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; to make sure Spring Application Context loads:\nOptional #  Lombok because it saves boilerplate code:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; Graphql Server #  I found this public Countries Graphql API from trevorblades. This API uses this Countries List as data sources.\nGraphql Client #  Graphql request body #  1 Basic curl to get familiar with Graphql client request #  A Graphql request requires a body request containing at least a query. Optionally a variable and an operationName. (operationName is only required if multiple operations are present in the query. I don’t use it in this tutorial).\nJust like this curl example:\ncurl \\ --location \\ --request POST 'https://countries.trevorblades.com/' \\ --header 'Content-Type: application/json' \\ --data-raw '{\u0026quot;query\u0026quot;:\u0026quot;query { \\n country(code: \\\u0026quot;BE\\\u0026quot;) { \\n name\\n capital\\n currency\\n }\\n}\u0026quot;,\u0026quot;variables\u0026quot;:{}}' You may copy/paste it into your terminal. The response should look like this\n{ \u0026#34;data\u0026#34;: { \u0026#34;country\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Belgium\u0026#34;, \u0026#34;capital\u0026#34;: \u0026#34;Brussels\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;EUR\u0026#34; } } } So far we have a working Graphql curl request. Let’s now code it in java.\n2. Java Graphql query #  2.1 GraphqlRequestBody #  Let’s create the GraphqlRequestBody object.\n2.2 Graphql Query #  Let’s now create a getCountryDetails.graphql file in the resources folder of the project.\nquery($code: ID!) { country(code: $code) { name capital currency } } 2.3 Graphql Variables #  Let’s create a variables.graphql file in the resources folder.\n{ \u0026#34;code\u0026#34; : \u0026#34;countryCode\u0026#34; } Graphql response #  Now that I have my Graphql request body and based on what I’m expecting from the API, let\u0026rsquo;s handle the response\nData Transfer Object #  I create my CountryDto Object :\n@Getter public class CountryDto { private CountryData data; @Getter public class CountryData { private Country country; @Getter public class Country { private String name; private String capital; private String currency; } } } Eventually, let’s create the CountryClient class 😀.\nI said it was a minimal Graphql client request, didn’t I?\n@Service @Slf4j public class CountryClient { private final String url; public CountryClient(@Value(\u0026#34;https://countries.trevorblades.com/\u0026#34;) String url) { this.url = url; } public CountryDto getCountryDetails(final String countryCode) throws IOException { WebClient webClient = WebClient.builder().build(); GraphqlRequestBody graphQLRequestBody = new GraphqlRequestBody(); final String query = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;getCountryDetails\u0026#34;); final String variables = GraphqlSchemaReaderUtil.getSchemaFromFileName(\u0026#34;variables\u0026#34;); graphQLRequestBody.setQuery(query); graphQLRequestBody.setVariables(variables.replace(\u0026#34;countryCode\u0026#34;, countryCode)); return webClient.post() .uri(url) .bodyValue(graphQLRequestBody) .retrieve() .bodyToMono(CountryDto.class) .block(); } } GraphqlSchemaReaderUtil class to read Graphql files stored in the resource folder:\n@Slf4j public final class GraphqlSchemaReaderUtil { public static String getSchemaFromFileName(final String filename) throws IOException { return new String( GraphqlSchemaReaderUtil.class.getClassLoader().getResourceAsStream(\u0026#34;graphql/\u0026#34; + filename + \u0026#34;.graphql\u0026#34;).readAllBytes()); } } Let’s just log the Graphql response in the main method of our Spring Boot App:\n@SpringBootApplication @Slf4j public class GraphqlClientApplication { public static void main(String[] args) throws IOException { ConfigurableApplicationContext context = SpringApplication.run(GraphqlClientApplication.class, args); CountryClient client = (CountryClient) context.getBean(\u0026#34;countryClient\u0026#34;); ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter(); CountryDto countryDto = client.getCountryDetails(\u0026#34;BE\u0026#34;); log.info(ow.writeValueAsString(countryDto)); } } Now, your console should log the response like this:\nUnit Test #  Unit test with MockWebServer can be found here.\nTL;DR #  Go to Github Repo.\n"},{"id":3,"href":"/docs/productivity/compress-pdf-offline/","title":"Compress Pdf Offline","section":"Productivity","content":"Compress PDF offline with ghostscript #  I found this great tool to compress pdf (python script) from the command line.\nRequirements #  Make sure you have ghoscript installed. If not just run brew install ghoscript\nHow to #  Copy source files from https://github.com/hkdb/cpdf to your bin directory (that’s defined in your env) eg. /usr/local/bin if you are on OSX.\nThen from your favorite terminal, just use one of the commands described in the readme of the project.\nBasic command:\ncpdf ebook in.pdf out.pdf That’s all.\nThank you hkdb!\n"},{"id":4,"href":"/docs/productivity/every-day-git-commands/","title":"Every Day Git Commands","section":"Productivity","content":"Every day Git commands for developers #  Here are some day to day useful git commands\nShow all remotes #  This show origin and upstream remotes\ngit remote -v git remote show origin #shows branches, tags etc. git remote show upstream #shows branches, tags etc. Add upstream remote #  (vs origin remote)\ngit remote add upstream git@github.com:username/git-repo.git Remove a remote file #  Remove a remote file or directory from a Git repository without deleting it from the local filesystem\nFor single file: #  git rm --cached myremotefiletodelete.log git commit -m \u0026quot;remove file from repo\u0026quot; git push For single directory: #  git rm --cached -r myremotedirectortytodelete git commit -m \u0026quot;remove folder from repo\u0026quot; git push Shortcut add \u0026amp; commit all files #  Without shortcut\ngit add . git commit -m \u0026quot;commit message\u0026quot; With shortcut\ngit commit -am \u0026quot;commit message\u0026quot; Show git history #  using pretty format\ngit log --pretty=format:\u0026quot;%h - %an, %ar : %s\u0026quot; "},{"id":5,"href":"/docs/productivity/google-spreadsheet-tricks/","title":"Google Spreadsheet Tricks","section":"Productivity","content":"Google spreadsheet tricks #  Remove characters from a string in a cell with Google spreadsheet #  Goal #  Remove the first 2 characters from a string in cell D1 :\n =RIGHT(D1,LEN(D1)-2) Explanations #   LEN(D1) returns the length of the string in a cell. RIGHT(D1, X) returns a substring from the end. First argument is the string. Seconde argument is the length of the substring to return.  Alternatively, to remove the last 2 characters, use :\n =LEFT(D1,LEN(D1)-2) "},{"id":6,"href":"/docs/web/embed-pdf-in-html/","title":"Embed Pdf in HTML","section":"Web","content":"Afficher un pdf dans une page HTML #  Pour afficher un document pdf dans une page HTML, plusieurs solutions existent.\nVous pouvez par exemple utiliser les services de scribd.com ou tout simplement insérer le code HTML suivant dans votre page :\nAvec la balise embed (/!\\ non compatible sur naviguateurs mobiles)\n\u0026lt;embed src=\u0026#34;https://yoursite.com/yourdocument.pdf\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;400p\u0026#34;\u0026gt; ou avec la balise iframe qui est compatible sur naviguateur mobile.\n\u0026lt;iframe src=\u0026#34;https://docs.google.com/viewer?url=https://yoursite.com/pdf/yourdocument.pdf\u0026amp;embedded=true\u0026#34; style=\u0026#34;width:100%; height:500px;\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; Voici le résultat :\n "}]