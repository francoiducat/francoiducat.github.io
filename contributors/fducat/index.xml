<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FDUCAT on</title><link>https://francoiducat.github.io/contributors/fducat/</link><description>Recent content in FDUCAT on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 28 May 2021 14:11:07 +0100</lastBuildDate><atom:link href="https://francoiducat.github.io/contributors/fducat/index.xml" rel="self" type="application/rss+xml"/><item><title>Compress PDF Off line</title><link>https://francoiducat.github.io/blog/compress-pdf-off-line/</link><pubDate>Sat, 23 Jan 2021 14:11:07 +0100</pubDate><guid>https://francoiducat.github.io/blog/compress-pdf-off-line/</guid><description>I found this great tool to compress pdf (python script) from the command line.
Requirements Make sure you have ghoscript installed. If not just run brew install ghoscript
How to Copy source files from https://github.com/hkdb/cpdf to your bin directory (thatâ€™s defined in your env) eg. /usr/local/bin if you are on OSX.
Then from your favorite terminal, just use one of the commands described in the readme of the project.
Basic command:</description></item><item><title>Minimal Graphql Client Request with Spring Boot</title><link>https://francoiducat.github.io/blog/minimal-graphql-client-request-with-spring-boot/</link><pubDate>Fri, 28 May 2021 14:11:07 +0100</pubDate><guid>https://francoiducat.github.io/blog/minimal-graphql-client-request-with-spring-boot/</guid><description>TLDR Go to Github Repo
Introduction In this tutorial, I will describe how to perform a minimal Graphql client request with Spring Boot and WebClient.
Requirements Obviously a Spring Boot Project is mandatory. I am using maven here.
Dependencies Mandatory WebFlux dependency to get WebClient:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Starter Test :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Optional Lombok because it saves boilerplate code :
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; Micrometer-core because it&amp;rsquo;s then so easy to transform an InputStream to String :</description></item></channel></rss>